#include <iostream>
using namespace std;

void Exchange(int a, int b);
void ExchangePointer(int* a, int* b);
void ExchangeLink(int& a, int& b);

int main()
{
    setlocale(LC_ALL, "ru");
    int a = 2;
    int b = 3;
    cout << a << "\t" << b << endl;
    Exchange(a, b);
    cout << a << "\t" << b << endl;
    ExchangePointer(&a, &b);
    cout << a << "\t" << b << endl;
    ExchangeLink(a, b);
    cout << a << "\t" << b << endl;

    //объявление ссылок
    int x = 2;
    int& ra = x;
    ra += 3;
    cout << x << endl;


    int n;
    cout << "Ввести размер массива: ";
    cin >> n;
    int* arr = new int[n];
    for (int i = 0; i < n; i++)
    {
        *(arr + i) = rand() % 100;
    }
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << "\t";
    }

}

void Exchange(int a, int b)
{
    int buffer = a;
    a = b;
    b = buffer;
}
void ExchangePointer(int* a, int* b)
{
    int buffer = *a;
    *a = *b;
    *b = buffer;
}

void ExchangeLink(int& a, int& b)
{
    int buffer = a;
    a = b;
    b = buffer;
}
/*

                              Передача параметров в функцию
Существует 3 способа передать параметр в функцию
по значению ( по значению)
по указателю ( по указателю )
по ссылке ( по ссылке)

всё вермя до этого мы передавали параметры в функцию по значению, при передаче параметров по значению
значение передаваемых пепеменных копируются в функию и если функция изменяет эти переменные
то все изменения отображаются лишь на копиях переменных при этом оригиналы остаются неизменными

Для того что бы функция могла изменять переданные в неё переменные их нужно передать по указателю
либо по ссылке.
                             Передача параметров по указателю
Для того что бы передать параметры в функцию по указателю, принимаемые параметры функции
должы быть указатели.
Эти указатели нужно постоянно разыменовывать в теле фунции, кроме того при вызове такой функции
нужн овзять адреса передаваемых переменных
При передаче параметров в функцию по указателю, при вызове функции в неё копируют адреса
передаваемых переменных. в теле функции мы разыменовываем эти адреса и в этот момент мы получаем доступ
к переменной объявленной в другой функции.



ссылка это переменная ктоая содерит адресс другой переменной в отличие от указателя ссылку
не нужно разыменовывать компилятор сам это делает, кроме того при объявлении ссылки
не нужно брать адрес той переменной котороый мы хотим сохранит ьв ссылку, компилятор и это сам делает
Ссылка это упрощённый вариант указателя, но ссылка скрывает от программистка адрес хранящийся в ней,
что делает невозможным изменить этот адрес. И именно поэтому ссылку можно проинициализировать
только лишь при объявлении.

Ссылки появились с языке С++, в языке С их не было. Ссылки используются только для
передачи параметров


                                    Передача параметров по ссылке
Для того чтобы передать параметры в функциб по ссылке принимаемые параметры функции должы быть
ссылками, в основном передача параметров в функцию по ссылке, синтаксически нчием не отличается
от передачи параметров по значению. Но физичесики работает как передача параметров по указателю

если функция принимает параметры по ссылке то при ее вызове, в неё копируются адреса передаваемых
переменных

Важно понимать то что при вызове функции в неё в любом случае что то копируется, либо адрес лио значение


                                    Динамическая память
Динамическим называется массив колличесиво эллеметнов которого может быть задано переменным
значением на этапе выполнения программы. Предварительно это значение можно вычеслить или ввести с
клавиатуры. Для того что бы объявить динамически массив нужно объявить указатель и выделить память

Оператор new выделяет непрерывный блок памяти для n эллементов заданного типа например int
и возвращает адресс выделенной памяти, этот адресс мы оператором присваивани записываем в указатель.

Обращаться к эллементам динамического массива мжно так же как как и к элементам статического массива
через арифметику указателя и опеарор разыменования либо через оператор индексирования.
передат ьдинамический масив в функци мжно так же как и статический масисв.

После того как динамический массив не нужен ег ообяательно нужно удалить, для этого используется оператор
delete он освобождает память занимаемую динамическим массивом


*/
